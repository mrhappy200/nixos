# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  ...
}: {
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = true;
    defaultNetwork.settings = {
      # Required for container networking to be able to use names.
      dns_enabled = true;
    };
  };

  # Enable container name DNS for non-default Podman networks.
  # https://github.com/NixOS/nixpkgs/issues/226365
  networking.firewall.interfaces."podman+".allowedUDPPorts = [53];

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."mylar3" = {
    image = "lscr.io/linuxserver/mylar3:latest";
    environment = {
      "PGID" = "1000";
      "PUID" = "1000";
      "TZ" = "Etc/UTC";
    };
    volumes = [
      "/nix/persist-hdd/media/mylar3/comics:/comics:rw"
      "/nix/persist-hdd/media/mylar3/data:/config:rw"
      "/nix/persist-hdd/media/mylar3/downloads:/downloads:rw"
    ];
    ports = ["8090:8090/tcp"];
    log-driver = "journald";
    extraOptions = ["--network-alias=mylar3" "--network=mylar3_default"];
  };
  systemd.services."podman-mylar3" = {
    serviceConfig = {Restart = lib.mkOverride 90 "always";};
    after = ["podman-network-mylar3_default.service"];
    requires = ["podman-network-mylar3_default.service"];
    partOf = ["podman-compose-mylar3-root.target"];
    wantedBy = ["podman-compose-mylar3-root.target"];
  };

  # Networks
  systemd.services."podman-network-mylar3_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f mylar3_default";
    };
    script = ''
      podman network inspect mylar3_default || podman network create mylar3_default
    '';
    partOf = ["podman-compose-mylar3-root.target"];
    wantedBy = ["podman-compose-mylar3-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-mylar3-root" = {
    unitConfig = {Description = "Root target generated by compose2nix.";};
    wantedBy = ["multi-user.target"];
  };
}
