# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  #nixpkgs.overlays = [
  #  (self: super: {
  #    linux-firmware = super.linux-firmware.overrideAttrs (old: rec {
  #      pname = "linux-firmware";
  #      version = "20250625";
  #      src = super.fetchFromGitLab {
  #        owner = "kernel-firmware";
  #        repo = "linux-firmware";
  #        rev = "cbbce56d6dcc1ec8fb485dfb92c68cb9acd51410";
  #        hash = "sha256-7XN2g4cnHLnICs/ynt8dCpTJbbBkbOdtRm3by/XrDps=";
  #      };
  #    });
  #  })
  #];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "ahci"
    "usb_storage"
    "usbhid"
    "sd_mod"
  ];
  boot.initrd.kernelModules = ["amdgpu"];
  boot.kernelModules = [];
  boot.kernelParams = ["amdgpu.ppfeaturemask=0xfffd3fff"];
  boot.extraModulePackages = [];
  boot.kernelPackages = pkgs.linuxPackages_latest;

  fileSystems."/" = {
    device = "none";
    fsType = "tmpfs";
    options = [
      "defaults"
      "size=25%"
      "mode=755"
    ];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/25B4-F069";
    fsType = "vfat";
    options = ["umask=0077"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/1ae98e99-f21a-48dc-9ca7-c83ab93f67da";
    fsType = "ext4";
  };

  boot.initrd.luks.devices."crypted".device = "/dev/disk/by-uuid/ce705e66-0f94-4194-a8e8-60d509aa94e8";

  fileSystems."/etc/nixos" = {
    device = "/nix/persist/etc/nixos";
    fsType = "none";
    options = ["bind"];
  };

  fileSystems."/var/log" = {
    device = "/nix/persist/var/log";
    fsType = "none";
    options = ["bind"];
  };

  swapDevices = [
    {
      device = "/dev/disk/by-partuuid/7d9cb859-248c-4ad0-875e-e189e5192b11";
      randomEncryption.enable = true;
    }
  ];

  fileSystems."/persist" = {
    device = "/nix/persist";
    fsType = "none";
    options = ["bind"];
    neededForBoot = true;
  };

  fileSystems."/etc/ssh" = {
    device = "/nix/persist/etc/ssh";
    fsType = "none";
    options = ["bind"];
  };

  fileSystems."/home/mrhappy200/.steam" = {
    device = "/persist/steam/.steam";
    fsType = "none";
    options = ["bind"];
    noCheck = true;
  };

  fileSystems."/home/mrhappy200/.local/share/Steam" = {
    device = "/persist/steam/.local/share/Steam";
    fsType = "none";
    options = ["bind"];
    noCheck = true;
  };
  fileSystems."/home/mrhappy200/.local/share/bottles" = {
    device = "/persist/home/mrhappy200/.local/share/bottles";
    fsType = "none";
    options = ["bind"];
    noCheck = true;
  };
  fileSystems."/home/mrhappy200/Games" = {
    device = "/persist/home/mrhappy200/Games";
    fsType = "none";
    options = ["bind"];
    noCheck = true;
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp8s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp9s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
